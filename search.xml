<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 第三课</title>
    <url>/lumix-ia/2019/11/08/python-lesson3/</url>
    <content><![CDATA[<h1 id="先说一句…"><a href="#先说一句…" class="headerlink" title="先说一句…"></a>先说一句…</h1><ul>
<li>这周按计划已是本学期最后一次 Python 课程。希望大家能复习过去三周内所学、重温过去三周内所思，并<del>充满激情地</del>完成综合实践任务。</li>
<li>请注意：<strong>11月11日的社团活动暂停一次。后续安排见群。</strong></li>
<li>如果你需要下载或打印这篇文章，<a href="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/documents/python-lesson3.pdf" target="_blank" rel="noopener">点击这里下载 PDF 版本</a>。</li>
</ul><a id="more"></a>
<h1 id="迭代循环-Iterative-Loop"><a href="#迭代循环-Iterative-Loop" class="headerlink" title="迭代循环 Iterative Loop"></a>迭代循环 Iterative Loop</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p><em>迭代</em>是用计算机解决问题的一种基本方法。它利用计算机运算速度快、适合做重复性操作的特点，让计算机重复执行一些步骤。在可以用迭代算法解决的问题中，至少存在一个能不断由旧值递推出新值的变量，这个变量被称为<em>迭代变量</em>。在每次执行这些步骤时，迭代变量的原值推出它的一个新值。</p>
<p>在 Python 中，<code>for</code>循环结构就是一种迭代的过程。与 C/C++ 不同的是，Python 很多情况下有关迭代变量的操作更简单。</p>
<p>为什么<code>for</code>结构被称为<strong>迭代</strong>循环？当然是因为还有别的循环类型存在嘛。在 Python 中，存在另一种由<code>while</code>结构组成的循环。详情可参考<a href="https://www.cnblogs.com/duwangdan/p/6830394.html" target="_blank" rel="noopener">这篇博客</a>。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><p>在 Python中，<code>for</code>循环典型语法形式如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> iterating_var <span class="keyword">in</span> sequence:</span><br><span class="line">   do_something()</span><br></pre></td></tr></table></figure>
<p>其中</p>
<ul>
<li><code>for</code>和<code>in</code>为<em>关键字</em>，是这个结构中不可改变或去掉的部分。</li>
<li><code>iterating_var</code>就是上面提到的递归变量。可为多种数据类型，具体取决于<code>sequence</code>。</li>
<li><code>sequence</code>是递归变量所存在的序列。换句话说，这个序列确定了迭代变量的原值推出它的一个新值的依据。很多情况下，<code>sequence</code>是一个列表，而对应的迭代方式即是让每执行一次<code>do_something()</code>，即循环体内的代码，<code>iterating_var</code>的值变为列表中下一个元素的值。列表中有几个元素，循环就执行几遍。</li>
</ul>
<p>另外，请仔细观察上面这个例子的<strong>代码缩进</strong>和符号“<code>:</code>”。</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="最简单的例子"><a href="#最简单的例子" class="headerlink" title="最简单的例子"></a>最简单的例子</h3><p>下面的循环使用<code>for</code>循环打印出了列表<code>topics</code>中的所有元素。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">topics = [<span class="string">'maker'</span>, <span class="string">'arduino'</span>, <span class="string">'ml'</span>, <span class="string">'nl'</span>]</span><br><span class="line"><span class="keyword">for</span> topic <span class="keyword">in</span> topics:</span><br><span class="line">    print(topic)</span><br></pre></td></tr></table></figure>
<p>再次重复：<code>topic</code>为迭代变量；topics是作为迭代序列的列表。与 C/C++ 不同，Python 的迭代变量不需要额外定义。</p>
<p>这三行代码等价于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">topics = [<span class="string">'maker'</span>, <span class="string">'arduino'</span>, <span class="string">'ml'</span>, <span class="string">'nl'</span>]</span><br><span class="line">print(topics[<span class="number">0</span>])</span><br><span class="line">print(topics[<span class="number">1</span>])</span><br><span class="line">print(topics[<span class="number">2</span>])</span><br><span class="line">print(topics[<span class="number">3</span>])</span><br></pre></td></tr></table></figure>
<p>可见，循环语句减少了表意重复的代码量。</p>
<h3 id="与range-搭配使用"><a href="#与range-搭配使用" class="headerlink" title="与range()搭配使用"></a>与<code>range()</code>搭配使用</h3><h4 id="range-函数"><a href="#range-函数" class="headerlink" title="range()函数"></a><code>range()</code>函数</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>顾名思义，<code>range()</code>的返回值是一个特定的范围。</p>
<h5 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h5><p>这是一个学习使用 Python 帮助文档的绝佳机会。😛</p>
<ol>
<li><p>打开一个<code>Python Shell</code>，如图所示。<br><img src="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/assets/python-lesson3/python-shell-startmenu.png" alt="python-shell-startmenu"><br>打开之后黑乎乎的：<br><img src="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/assets/python-lesson3/python-shell-screenshot.png" alt="python-shell-screenshot"></p>
</li>
<li><p>输入命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">help(range)</span><br></pre></td></tr></table></figure>
<p>在<code>help()</code>函数的小括号可以里填任何你想查询的准确关键词。</p>
</li>
<li><p>抓住关键部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Return an object that produces a sequence of integers from start (inclusive) to stop (exclusive) by step. range(i, j) produces i, i+1, i+2, ..., j-1. Start defaults to 0, and stop is omitted! range(4) produces 0, 1, 2, 3. These are exactly the valid indices for a list of 4 elements. When step is given, it specifies the increment (or decrement).</span><br></pre></td></tr></table></figure>
</li>
<li><p>有需可自行翻译。</p>
</li>
</ol>
<p>当然，帮助文档解决不了你的疑问没关系，因为下面还要讲的嘛。</p>
<h6 id="最简单的例子-1"><a href="#最简单的例子-1" class="headerlink" title="最简单的例子"></a>最简单的例子</h6><p><code>range()</code>接受一个参数即可正常工作。这个参数一般情况下是个整数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> counter <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">    print(str(counter))</span><br></pre></td></tr></table></figure>
<p>在课上我们已经注意到了，输出有点和预期不符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td></tr></table></figure>
<p>原因很简单：此时<code>range()</code>的作用是返回<strong>从0至比参数唯一的参数<code>j</code>小1的值</strong>（<strong>j-1</strong>）组成的范围。这就是编程中常见的<em>差一行为</em>。使用<code>range()</code>时，如果输出不符合预期且不打算动脑筋排查错误，尝试将参数<code>j</code>的值加1或减1是极好的下下策。</p>
<h6 id="更多参数"><a href="#更多参数" class="headerlink" title="更多参数"></a>更多参数</h6><p>事实上，<code>range</code>可以接受三个参数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> counter <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span>):</span><br><span class="line">    print(str(counter))</span><br></pre></td></tr></table></figure>
<p>例子中的“1”(<strong>参数<code>i</code></strong>)替换的是“最简单的例子”里“0”的功能，即范围的起始值。“2”被称为<code>step</code>，也就是步长，可理解成数学中等差数列的公差。<br>自然，代码的输出是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">3</span><br><span class="line">5</span><br><span class="line">7</span><br><span class="line">9</span><br></pre></td></tr></table></figure>
<h6 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h6><p>在标准结构</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">range(i, j, step)</span><br></pre></td></tr></table></figure>
<p>中，只有终点<code>j</code>是不可或缺的参数。三者的相对位置不能改变。只要满足这两个要求，<code>range()</code>函数随便你用啦。</p>
<h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><p>用<code>range()</code>生成的数字序列代替列表在一些情况下很方便。下面用两个例子具体展示。</p>
<h4 id="例：输出100以内的完全平方数"><a href="#例：输出100以内的完全平方数" class="headerlink" title="例：输出100以内的完全平方数"></a>例：输出100以内的完全平方数</h4><p>问题等价于输出1到10的平方数。可以从1数到10，并用<code>print()</code>打印出当前迭代变量的平方数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> counter <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    sqr = counter ** <span class="number">2</span></span><br><span class="line">    print(str(sqr))</span><br></pre></td></tr></table></figure>
<p>输出是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">4</span><br><span class="line">9</span><br><span class="line">16</span><br><span class="line">25</span><br><span class="line">36</span><br><span class="line">49</span><br><span class="line">64</span><br><span class="line">81</span><br><span class="line">100</span><br></pre></td></tr></table></figure>
<p>其中<code>**</code>是指数运算符。使用格式为<code>m ** n</code>，<code>m</code>是底数，<code>n</code>是指数。因此，<code>2 ** 5</code>的意思是“2的5次方”。</p>
<p>思考：为什么输出的是1到10的平方数，<code>range()</code>的第二个参数是11？</p>
<h4 id="例：输出500以内能被3整除的数"><a href="#例：输出500以内能被3整除的数" class="headerlink" title="例：输出500以内能被3整除的数"></a>例：输出500以内能被3整除的数</h4><h5 id="方法一：条件语句"><a href="#方法一：条件语句" class="headerlink" title="方法一：条件语句"></a>方法一：条件语句</h5><p><code>%</code>在 Python 中是一个运算符号，表示<em>取模</em>。<code>m % n</code>的值是<code>m</code>除以<code>n</code>的<strong>余数</strong>。</p>
<p>从1数到500，每次判断当前这个数除以3余数是否为0，即是否能被3整除。若能，则用<code>print()</code>打印出这个数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> counter <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">501</span>):</span><br><span class="line">    <span class="keyword">if</span> counter % <span class="number">3</span> == <span class="number">0</span>:</span><br><span class="line">        print(str(counter))</span><br></pre></td></tr></table></figure>

<h5 id="方法二：巧用step"><a href="#方法二：巧用step" class="headerlink" title="方法二：巧用step"></a>方法二：巧用<code>step</code></h5><p>从3开始数到500，用<code>step</code>定义每隔3个数一次并打印出当前数到的数，也可以解决问题。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> counter <span class="keyword">in</span> range(<span class="number">3</span>, <span class="number">501</span>, <span class="number">3</span>):</span><br><span class="line">    print(str(counter))</span><br></pre></td></tr></table></figure>
<p>两种方法等价，输出都是（<code>···</code>省略了一些结果）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br><span class="line">6</span><br><span class="line">9</span><br><span class="line">12</span><br><span class="line">15</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">492</span><br><span class="line">495</span><br><span class="line">498</span><br></pre></td></tr></table></figure>

<h3 id="嵌套循环"><a href="#嵌套循环" class="headerlink" title="嵌套循环"></a>嵌套循环</h3><p>顾名思义，<em>嵌套循环</em>指的就是一个<code>for</code>循环结构的内部还嵌了一层或多层<code>for</code>循环。下面用一个例子具体展示。</p>
<p>如何帮助你小学的弟弟妹妹解决九九乘法表？不妨用 Python 打印出来一个给TA背。🤣</p>
<p>请仔细观察<strong>代码缩进</strong>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> op1 <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> op2 <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        current_product = op1 * op2</span><br><span class="line">        current_output = str(op1) + <span class="string">"*"</span> + str(op2) + <span class="string">"="</span> + str(current_product)</span><br><span class="line">        print(current_output, end=<span class="string">"  "</span>)</span><br><span class="line">    print(<span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure>
<p>首先，看看两个循环是怎么嵌套的：每当外循环的迭代变量<code>op1</code>从<code>range(1, 10)</code>取一个时，内循环<strong>总是完整地执行了一遍</strong>。也就是说，当<code>op1</code>数1个数时，<code>op2</code>数了9个数。下面这幅图展示了<code>op1</code>从1迭代到<code>3</code>的过程。<br><img src="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/assets/python-lesson3/nested-loop.png" alt="nested-loop"><br>九九乘法表的每一个基本单元都是<code>m*n=x</code>的形式，正好用<code>op1</code>表示<code>m</code>，<code>op2</code>表示<code>n</code>。</p>
<p>内循环中剩下的代码很好理解。<code>current_product</code>是<code>x</code>。<code>current_output</code>把两个乘数和积都转换成字符串并用<code>+</code>符号拼接上乘号和等于符号。内循环每执行9次，也就是<code>op2</code>每从1数到9，会执行一次<code>print(&quot;\n&quot;)</code>来换行，使得每一横行都是九个基本单元。</p>
<p>另外你可能已经注意到了内循环里的<code>print()</code>有一个没见过的参数<code>end</code>。但善于观察的你一定见过 Python 其实每个<code>print()</code>之后都自动换行的现象。也就是说，</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"1"</span>)</span><br><span class="line">print(<span class="string">"2"</span>)</span><br><span class="line">print(<span class="string">"3"</span>)</span><br></pre></td></tr></table></figure>
<p>的输出并不是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">123</span><br></pre></td></tr></table></figure>
<p>而是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td></tr></table></figure>
<p>不信你试！😄</p>
<p>原理：Python 的每一行<code>print()</code>出来的语句都有结尾字符，默认是<code>\n</code>。在通常情况下这个功能对懒癌有极好的促进作用，但显然在<code>1*1=1</code>和<code>1*1=2</code>之间需要的不是换行，而是空格。因此，使用<code>end=&quot;  &quot;</code>把默认的结尾字符换成两个空格。</p>
<p>最后，看看输出：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1*1=1  1*2=2  1*3=3  1*4=4  1*5=5  1*6=6  1*7=7  1*8=8  1*9=9</span><br><span class="line"></span><br><span class="line">2*1=2  2*2=4  2*3=6  2*4=8  2*5=10  2*6=12  2*7=14  2*8=16  2*9=18</span><br><span class="line"></span><br><span class="line">3*1=3  3*2=6  3*3=9  3*4=12  3*5=15  3*6=18  3*7=21  3*8=24  3*9=27</span><br><span class="line"></span><br><span class="line">4*1=4  4*2=8  4*3=12  4*4=16  4*5=20  4*6=24  4*7=28  4*8=32  4*9=36</span><br><span class="line"></span><br><span class="line">5*1=5  5*2=10  5*3=15  5*4=20  5*5=25  5*6=30  5*7=35  5*8=40  5*9=45</span><br><span class="line"></span><br><span class="line">6*1=6  6*2=12  6*3=18  6*4=24  6*5=30  6*6=36  6*7=42  6*8=48  6*9=54</span><br><span class="line"></span><br><span class="line">7*1=7  7*2=14  7*3=21  7*4=28  7*5=35  7*6=42  7*7=49  7*8=56  7*9=63</span><br><span class="line"></span><br><span class="line">8*1=8  8*2=16  8*3=24  8*4=32  8*5=40  8*6=48  8*7=56  8*8=64  8*9=72</span><br><span class="line"></span><br><span class="line">9*1=9  9*2=18  9*3=27  9*4=36  9*5=45  9*6=54  9*7=63  9*8=72  9*9=81</span><br></pre></td></tr></table></figure>

<h3 id="循环与列表"><a href="#循环与列表" class="headerlink" title="循环与列表"></a>循环与列表</h3><p>列表本身就和<code>range()</code>函数一样，可以作为<code>for</code>迭代循环结构中的序列。自然而然，循环和列表有着不解之缘。</p>
<h4 id="列表解析-list-comprehension"><a href="#列表解析-list-comprehension" class="headerlink" title="列表解析 list comprehension"></a>列表解析 list comprehension</h4><p><em>列表解析</em>是一种看起来有些玄学但效率很高的语法结构。在下面的例子中，一行代码更比三行强：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqr = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>)]</span><br></pre></td></tr></table></figure>
<p>生成的列表<code>sqr</code>等价于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">sqr = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">11</span>):</span><br><span class="line">    sqr.append(value ** <span class="number">2</span>)</span><br></pre></td></tr></table></figure>
<p>生成的列表<code>sqr</code>。不信你可以把两种方法生成的<code>sqr</code>打印出来观察是否一模一样。</p>
<p><code>append()</code><em>方法</em>的功能是把括号里的参数当作元素，添加到<code>.</code>之前的那个列表（此处是<code>sqr</code>）里去。注意 Python 方法和函数在语法上的区别：方法用一个“<code>.</code>”（英文句号，半角）连接它的操作对象。</p>
<p>你能借助第二种列表生成方法自己总结出列表解析的语法规则吗？</p>
<h4 id="遍历列表-list-traversal"><a href="#遍历列表-list-traversal" class="headerlink" title="遍历列表 list traversal"></a>遍历列表 list traversal</h4><p>所谓<em>遍历</em>，是指沿着某条搜索路线，依次对某个数据结构中每个节点均做一次访问。对于 Python 的列表数据结构来讲，遍历指的是访问每一个从头到尾的元素。举例？你已经看过啦，就是这篇文章开头处“最简单的例子”。</p>
<h1 id="另外…（首尾照应）"><a href="#另外…（首尾照应）" class="headerlink" title="另外…（首尾照应）"></a>另外…（首尾照应）</h1><ul>
<li>重要的事情再说一遍：<strong>11月11日的社团活动暂停一次。后续安排见群。</strong></li>
<li>请<strong>认真看完这篇并亲自写一遍并执行了一下所有程序</strong>的你在这个页面的评论区回复一个“名字+已完成”。（“幸好翻到了这里”，你庆幸道。😏）</li>
<li><strong>请大家尽量自己亲自写一遍上面的代码并执行</strong>。编程如同刷题，不过手、当“云玩家”真的很难进步！有任何问题，都<del>可以</del><strong>必须</strong>在下面的评论区或是 Lumix 2019 QQ群里提出来！</li>
</ul>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>for</tag>
        <tag>range()</tag>
        <tag>append()</tag>
        <tag>**</tag>
        <tag>循环</tag>
        <tag>列表解析</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 第二课</title>
    <url>/lumix-ia/2019/11/02/python-lesson2/</url>
    <content><![CDATA[<h1 id="先说一句…"><a href="#先说一句…" class="headerlink" title="先说一句…"></a>先说一句…</h1><ul>
<li>第三周的社团活动可能会有一个德国人来参加，因此会用中文和英语讲 Python。</li>
<li>如果你需要下载或打印这篇文章，<a href="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/documents/python-lesson2.pdf" target="_blank" rel="noopener">点击这里下载 PDF 版本</a>。</li>
</ul><h1 id="这一周的总结"><a href="#这一周的总结" class="headerlink" title="这一周的总结"></a>这一周的总结</h1><p>第二周，学习了判断语句，<code>if</code>、<code>if-else</code>和<code>if-elif-else</code>三种结构。初识列表，了解列表的初始化、删除和添加元素。</p><a id="more"></a>

<h1 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>进行条件测试。</p>
<h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><h3 id="条件测试表达式"><a href="#条件测试表达式" class="headerlink" title="条件测试表达式"></a>条件测试表达式</h3><p>每一个<em>条件测试表达式</em>（又称<em>布尔表达式</em>）的值只可能是正确，即<code>True</code>；或错误，即<code>False</code>二者中一种（注意大小写）。<br>条件测试表达式的基本格式是：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var == value</span><br></pre></td></tr></table></figure>
<p>其中<code>var</code>为一变量名，<code>value</code>“<code>==</code>”被称为<em>相等运算符</em>。显然，这个运算符使得只有待测试值是变量的值时，整个表达式的值才为<code>True</code>；反之则为<code>False</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"lumix"</span></span><br><span class="line"><span class="keyword">if</span> name == <span class="string">"lumix"</span>:</span><br><span class="line">    print(<span class="string">"Nice!"</span>)</span><br></pre></td></tr></table></figure>
<p>注意第三行的缩进：“<code>:</code>”的下一行在开始处需要<strong>四个空格</strong>（或一个制表符——按<code>Tab</code>键输入）</p>
<h3 id="直接给值"><a href="#直接给值" class="headerlink" title="直接给值"></a>直接给值</h3><p>由于一个条件测试表达式等价于<code>True</code>或<code>False</code>，原表达式可以用这两种值的一种或代表这两种值的一种的变量名替代，即：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="literal">False</span>:</span><br><span class="line">    print(<span class="string">"It's false!"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">expr = <span class="literal">True</span></span><br><span class="line"><span class="keyword">if</span> expr:</span><br><span class="line">    print(<span class="string">"It's true!"</span>)</span><br></pre></td></tr></table></figure>

<h3 id="其他条件运算符"><a href="#其他条件运算符" class="headerlink" title="其他条件运算符"></a>其他条件运算符</h3><p>这些运算符的用法同“<code>==</code>”。</p>
<table>
<thead>
<tr>
<th align="center">符号</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>!=</code></td>
<td>不等于</td>
</tr>
<tr>
<td align="center"><code>&gt;</code></td>
<td>大于</td>
</tr>
<tr>
<td align="center"><code>&lt;</code></td>
<td>小于</td>
</tr>
<tr>
<td align="center"><code>&gt;=</code></td>
<td>大于等于</td>
</tr>
<tr>
<td align="center"><code>&lt;=</code></td>
<td>小于等于</td>
</tr>
</tbody></table>
<h4 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h4><p>显然，它们可以用于判断数字（整数、浮点数）之间的大小关系。那么像</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="string">"a"</span> &gt; <span class="string">"b"</span>:</span><br></pre></td></tr></table></figure>
<p>比较字符串符合 Python 的语法要求吗？</p>
<h3 id="关键词and和or"><a href="#关键词and和or" class="headerlink" title="关键词and和or"></a>关键词<code>and</code>和<code>or</code></h3><p>和数学中的复合命题含义相同。这两个关键字决定了其左右两个表达式复合到一起的新表达式的值的判断。<br>格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expr_a <span class="keyword">and</span> expr_b:</span><br><span class="line"><span class="comment"># 省略剩下循环语句</span></span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> expr_a <span class="keyword">or</span> expr_b:</span><br><span class="line"><span class="comment"># 省略剩下循环语句</span></span><br></pre></td></tr></table></figure>
<p><code>and</code>左右两边的表达式值均为<code>True</code>时，复合表达式的值才为<code>True</code>；否则就是<code>False</code>。<br><code>or</code>左右至少一边的表达式值为<code>True</code>时，符合表达式的值就为<code>True</code>；反之则是<code>False</code>。</p>
<h2 id="更复杂的结构"><a href="#更复杂的结构" class="headerlink" title="更复杂的结构"></a>更复杂的结构</h2><h3 id="if-else-结构"><a href="#if-else-结构" class="headerlink" title="if-else 结构"></a><em>if-else</em> 结构</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age = <span class="number">17</span></span><br><span class="line"><span class="keyword">if</span> age == <span class="number">18</span>:</span><br><span class="line">    print(<span class="string">"Hey! Happy Comming-of-Age Day!"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"Your age isn't correct for the celebration!"</span>)</span><br></pre></td></tr></table></figure>
<p><code>else</code>后不再需要条件表达式。<br>同样，两个“<code>:</code>”后的第二行都需要缩进。</p>
<h3 id="if-elif-else-结构"><a href="#if-elif-else-结构" class="headerlink" title="if-elif-else 结构"></a><em>if-elif-else</em> 结构</h3><p>顾名思义，<code>elif</code>指的是“else if”，即“其他如果”。<code>if</code>和<code>else</code>之间可以存在单个或多个<code>elif</code>。</p>
<p>条件的判断从前到后，即未通过第一个<code>if</code>之后才能进行第一个<code>elif</code>判断；任意一个<code>if</code>或<code>elif</code>的判断一旦被满足，程序的执行就会跳过整个<code>if-elif-else</code>结构的剩下部分。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">score = <span class="number">50</span></span><br><span class="line"><span class="keyword">if</span> score = <span class="number">100</span>:</span><br><span class="line">    print(<span class="string">"full marks"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">100</span> <span class="keyword">and</span> score &gt;= <span class="number">90</span>:</span><br><span class="line">    print(<span class="string">"nice"</span>)</span><br><span class="line"><span class="keyword">elif</span> score &lt; <span class="number">90</span> <span class="keyword">and</span> score &gt;= <span class="number">80</span>:</span><br><span class="line">    print(<span class="string">"so so"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"improvement needed"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>在 Python 中，变量指的是有序的、可变的元素集合。（同一个列表中）元素可为多种数据类型，如数字和字符串。</p>
<h2 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h2><p>类似数字和字符串的声明，列表的声明使用<code>=</code>赋值符号。以逗号（英语，半角）将元素间隔开；一头一尾用方括号包裹。<br>声明一个全由字符串组成的列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">topics = [<span class="string">'maker'</span>, <span class="string">'arduino'</span>, <span class="string">'ml'</span>, <span class="string">'nl'</span>]</span><br></pre></td></tr></table></figure>
<p>声明一个多种元素数据类型的列表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mess = [<span class="string">'lumix'</span>, <span class="number">4</span>, <span class="number">10.00</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure>
<p>在 Python 中，值只能为<code>True</code>或<code>False</code>的变量称为<em>布尔型变量</em>。因此，数组<code>mess</code>中的元素有字符串、数字（整数与浮点数）和布尔三种变量类型。</p>
<h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><h3 id="输出整个列表"><a href="#输出整个列表" class="headerlink" title="输出整个列表"></a>输出整个列表</h3><p>函数<code>print()</code>接受直接将列表作为参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(themes)</span><br></pre></td></tr></table></figure>

<h3 id="引用元素"><a href="#引用元素" class="headerlink" title="引用元素"></a>引用元素</h3><p>基本格式为<code>list[num]</code>。其中<code>list</code>是一已声明的列表名；<code>num</code>是所引用元素在该列表中的索引（角标）。<strong>Python 中的角标从0开始。</strong>使用<code>list[-n]</code>引用列表<code>list</code>中<strong>倒数</strong>第n个元素。</p>
<p>将值<code>&#39;arduino&#39;</code>赋给变量<code>name</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">topics = [<span class="string">'maker'</span>, <span class="string">'arduino'</span>, <span class="string">'ml'</span>, <span class="string">'nl'</span>]</span><br><span class="line">name = topic[<span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<p>打印出第三个元素（角标为2）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(topics[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p>在这里倒着引用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(topics[<span class="number">-2</span>])</span><br></pre></td></tr></table></figure>
<p>等价。</p>
<h3 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h3><h4 id="del"><a href="#del" class="headerlink" title="del"></a>del</h4><p>Python 中，可以用<strong>语句</strong><code>del</code>删除列表中的元素。之所以被叫做<strong>语句</strong>，是因为它没有像函数一样把参数框起来的括号。<br>删除<code>topics</code>中的最后一项：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> topics[<span class="number">3</span>]</span><br></pre></td></tr></table></figure>

<h4 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h4><p>注意<code>remove</code>方法的格式和参数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">topics.remove(<span class="string">'ml'</span>)</span><br></pre></td></tr></table></figure>

<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>使用方法<code>sort()</code>。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">topics.sort()</span><br></pre></td></tr></table></figure>

<h1 id="另外…（首尾照应）"><a href="#另外…（首尾照应）" class="headerlink" title="另外…（首尾照应）"></a>另外…（首尾照应）</h1><ul>
<li>请<strong>认真看完这篇并亲自写一遍并执行了一下所有程序</strong>的你在这个页面的评论区回复一个“名字+已完成”。（“幸好翻到了这里”，你庆幸道。😏）</li>
<li><strong>请大家尽量自己亲自写一遍上面的代码并执行</strong>。编程如同刷题，不过手、当“云玩家”真的很难进步！有任何问题，都<del>可以</del><strong>必须</strong>在下面的评论区或是 Lumix 2019 QQ群里提出来！</li>
</ul>
<p>下周一请尽量电脑。大家周末快乐！😉</p>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>if</tag>
        <tag>else</tag>
        <tag>elif</tag>
        <tag>list</tag>
        <tag>del</tag>
        <tag>remove()</tag>
        <tag>sort()</tag>
        <tag>sorted()</tag>
        <tag>条件语句</tag>
        <tag>列表</tag>
      </tags>
  </entry>
  <entry>
    <title>Python 第一课</title>
    <url>/lumix-ia/2019/10/26/python-lesson1/</url>
    <content><![CDATA[<h1 id="先说一句…"><a href="#先说一句…" class="headerlink" title="先说一句…"></a>先说一句…</h1><ul>
<li><strong>请大家尽量自己亲自写一遍上面的代码并执行</strong>。编程如同刷题，不过手、当“云玩家”真的很难进步！</li>
<li>有任何问题，都<del>可以</del><strong>必须</strong>在下面的评论区或是 Lumix 2019 QQ群里提出来！</li>
<li>如果你需要下载或打印这篇文章，<a href="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/documents/python-lesson1.pdf" target="_blank" rel="noopener">点击这里下载 PDF 版本</a>。</li>
</ul><a id="more"></a>
<h1 id="这一周的总结"><a href="#这一周的总结" class="headerlink" title="这一周的总结"></a>这一周的总结</h1><p>第一周，开始学习 Python 编程语言。巩固了编程相关基本概念；学习了字符串、整数和浮点数三种基本变量以及对它们的操作；了解了<code>print()</code>、<code>str()</code>、<code>int()</code>三种函数的简单用法。</p>
<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><p>你自己的<del>第一个</del>程序。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure>
<p>需要注意一下几点：</p>
<ul>
<li><code>print()</code>是一个<em>函数</em>，和数学中相似，编程中的函数需要用（英文的，半角）小括号将它的参数括起来。</li>
<li>在这个程序中，小括号内的<code>&quot;Hello world!&quot;</code>字符串是<code>print()</code>的参数。</li>
<li>在 Python IDLE 或其他具有<em>代码高亮</em>功能的文本（程序源代码的本质就是文本文件）编辑工具中，你会看见如上这种现象：<code>print()</code>和<code>&quot;Hello world!&quot;</code>的颜色不一样，指示着它们在代码中的性质不一样——前者是函数，后者是字符串。</li>
<li>使用<code>\n</code>可以使输出提行；使用<code>\t</code>可以使输出空出一个制表符。如：<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"line 1\n line 2\n line 3"</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"\ttabled line 1"</span>)</span><br></pre></td></tr></table></figure>
。<br>前者的输出是<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">line 1</span><br><span class="line">line 2</span><br><span class="line">line 3</span><br></pre></td></tr></table></figure>
。</li>
</ul>
<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><p><em>注释</em>让你能够使用自然语言（即中文、英文等等）在程序里添加说明。注释在程序执行时会直接被 Python 解释器忽略。</p>
<p>在 Python 中，你可以用井号“<code>#</code>”或三个“<code>&#39;</code>”来表示注释。如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 这是我的第一个 Python 程序。</span></span><br><span class="line">print(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">'''这是我的第一个 Python 程序。'''</span></span><br><span class="line">print(<span class="string">"Hello world!"</span>)</span><br></pre></td></tr></table></figure>

<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>在 Python 中，<em>变量</em>就是值可以被改变的数据（顾名思义嘛）。每一个变量都具有以下两个属性：<strong>名字</strong>和<strong>值</strong>。</p>
<h2 id="变量的命名"><a href="#变量的命名" class="headerlink" title="变量的命名"></a>变量的命名</h2><p>Python 中变量的名字只能由字母、数字和下划线(及“<code>_</code>”)组成，另外</p>
<ul>
<li>不能以数字开头；</li>
<li>除上面提及的字符以外的任何字符都不能作为变量名的组成部分，<strong>包括空格</strong>。</li>
<li>不能用关键字和函数的名字用作变量名。例如，<code>print</code>作为变量是不被允许的。</li>
</ul>
<p>因此，强迫症地列一个规则表：</p>
<table>
<thead>
<tr>
<th align="center">第一个字符</th>
<th align="center">第二至第n个字符</th>
</tr>
</thead>
<tbody><tr>
<td align="center">字母、下划线</td>
<td align="center">字母、数字、下划线</td>
</tr>
</tbody></table>
<p>正确举例：</p>
<ul>
<li><code>name</code></li>
<li><code>age</code></li>
<li><code>name10</code></li>
<li><code>_age</code></li>
<li><code>name_and_age</code></li>
</ul>
<p>错误举例：</p>
<ul>
<li><code>%name%</code> - 带有非法符号“<code>%</code>”</li>
<li><code>10name</code> - 以数字开头</li>
<li><code>10_name</code> - 以数字开头</li>
<li><code>print</code> - 与 Python 的函数重名</li>
</ul>
<h2 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h2><p>在为变量赋值时，需要指定变量名和值。格式为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var_name = var_value</span><br></pre></td></tr></table></figure>
<p>其中<code>var_name</code>为变量名，<code>var_value</code>为变量值。也就是说，这行代码的作用是把等号右边的赋予给等号左边的名字。以后想使用等号右边的值，可用等号左边的变量名来代表变量值。注意与数学中等号的意义区分开——编程中的等号的意义不是“等于”。</p>
<h2 id="变量的类型"><a href="#变量的类型" class="headerlink" title="变量的类型"></a>变量的类型</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em>字符串</em>即一系列字符。在 Python 中，字符串必须被（英文的，半角）双引号对或单引号对括起来，例如<code>&quot;Hello world!&quot;</code>和<code>&#39;Goodye&#39;</code>。</p>
<h4 id="给字符串赋值"><a href="#给字符串赋值" class="headerlink" title="给字符串赋值"></a>给字符串赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"lumix"</span></span><br><span class="line">school = <span class="string">'CDEFLS'</span></span><br></pre></td></tr></table></figure>

<h4 id="给字符串的拼接"><a href="#给字符串的拼接" class="headerlink" title="给字符串的拼接"></a>给字符串的拼接</h4><p>在 Python 中，字符串可直接用加号（“<code>+</code>”）连接到一起，如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">full_name = <span class="string">"lumix"</span> + <span class="string">" "</span> + <span class="string">"school"</span></span><br></pre></td></tr></table></figure>
<p>在拼接后，变量<code>pretty_full_name</code>的值是<code>&quot;lumix school&quot;</code>（注意空格是怎么添加进去的）。</p>
<h4 id="用print-函数输出字符串"><a href="#用print-函数输出字符串" class="headerlink" title="用print()函数输出字符串"></a>用<code>print()</code>函数输出字符串</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">"Lumix"</span>)</span><br></pre></td></tr></table></figure>
<p>当然，这句代码和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">"Lumix"</span></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure>
<p>等价。</p>
<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="给数字变量赋值"><a href="#给数字变量赋值" class="headerlink" title="给数字变量赋值"></a>给数字变量赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="number">2019</span></span><br><span class="line">age = <span class="number">16</span></span><br></pre></td></tr></table></figure>

<h4 id="小学数学：加减乘除和四则混合运算"><a href="#小学数学：加减乘除和四则混合运算" class="headerlink" title="小学数学：加减乘除和四则混合运算"></a>小学数学：加减乘除和四则混合运算</h4><p>请注意：</p>
<ul>
<li>Python 中的乘号是<code>*</code>，除号是<code>/</code>（除号要和<code>\n</code>与<code>\t</code>中的<code>\</code>区分开）</li>
<li>Python 中的小括号也表示优先计算，但与数学不同，没有中括号或大括号。</li>
<li>下面例子中表示赋值符号“<code>=</code>”、变量名和运算符号之间的空格不是必须的，但为了使程序清晰可读，建议你也这样写。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">c = <span class="number">5</span></span><br><span class="line">d = <span class="number">10</span></span><br><span class="line">sum = a + b</span><br><span class="line">difference = d - c</span><br><span class="line">product = b * c</span><br><span class="line">quotient = d / c</span><br><span class="line">mixed_1 = a + b - c * d</span><br><span class="line">mixed_2 = a + (b - c) * d</span><br><span class="line">mixed_3 = a + ( (b - c) - d)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="浮点数"><a href="#浮点数" class="headerlink" title="浮点数"></a>浮点数</h3><p>Python 将带小数点的数字称为<em>浮点数</em>。所谓“浮”，指的是<strong>小数点可出现在数字的任何位置</strong>。例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">float_1 = <span class="number">0.1</span></span><br><span class="line">float_2 = <span class="number">0.5</span></span><br></pre></td></tr></table></figure>
<p>浮点数也可像上面的整数一样加减乘除和进行四则运算。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fsum = <span class="number">0.1</span> + <span class="number">0.5</span></span><br><span class="line">fproduct = <span class="number">0.1</span> * <span class="number">5</span></span><br></pre></td></tr></table></figure>

<h1 id="str-和int-函数"><a href="#str-和int-函数" class="headerlink" title="str()和int()函数"></a><code>str()</code>和<code>int()</code>函数</h1><p><code>str()</code>将数字变量转换为字符串。这在输出数字时是必要的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="number">2019</span></span><br><span class="line">print(str(year))</span><br></pre></td></tr></table></figure>
<p><code>int()</code>的行为正和<code>str()</code>相反。可将本以字符串类型存储的真·数字转换为数字，从而进行加减乘除等只能在数字上进行的操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">year = <span class="string">"2019"</span></span><br><span class="line">future = int(year) + <span class="number">1000</span></span><br></pre></td></tr></table></figure>
<p>当然，如果要把整数变量<code>future</code>的值当作<code>print()</code>的参数输出出来，需要再次转换为字符串变量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(str(future))</span><br></pre></td></tr></table></figure>

<h1 id="另外…（首尾照应）"><a href="#另外…（首尾照应）" class="headerlink" title="另外…（首尾照应）"></a>另外…（首尾照应）</h1><ul>
<li>请<strong>认真看完这篇并亲自写一遍并执行了一下所有程序</strong>的你在这个页面的评论区回复一个“名字+已完成”。（“幸好翻到了这里”，你庆幸道。😏）</li>
<li><strong>请大家尽量自己亲自写一遍上面的代码并执行</strong>。编程如同刷题，不过手、当“云玩家”真的很难进步！有任何问题，都<del>可以</del><strong>必须</strong>在下面的评论区或是 Lumix 2019 QQ群里提出来！</li>
</ul>
<p>下周一务必、务必、务必记得带电脑。大家周末快乐！😉</p>
]]></content>
      <categories>
        <category>资料</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>print()</tag>
        <tag>str()</tag>
        <tag>int()</tag>
        <tag>字符串变量</tag>
        <tag>整数变量</tag>
        <tag>浮点数变量</tag>
      </tags>
  </entry>
  <entry>
    <title>安装 Python</title>
    <url>/lumix-ia/2019/10/19/python-installation/</url>
    <content><![CDATA[<p>欢迎大家加入 Lumix 社团。这篇文章简单介绍了在你的电脑上安装<code>Python</code>的过程。<br>本文针对 Windows 操作系统。<em>如果你使用 *nix，大概就不用继续看了。</em><br><em>如果你已经预测出了下面会发生什么，大概就不用继续看了。</em></p><a id="more"></a>
<h3 id="首先要明确的一点是：安装程序到底会在电脑上安装哪些组件？"><a href="#首先要明确的一点是：安装程序到底会在电脑上安装哪些组件？" class="headerlink" title="首先要明确的一点是：安装程序到底会在电脑上安装哪些组件？"></a>首先要明确的一点是：安装程序到底会在电脑上安装哪些组件？</h3><p>主要有以下三者：</p>
<ul>
<li>Python 解释器：顾名思义，即把以<code>Python</code>语言编写好的源代码解释给电脑听的程序，因此也扮演着源代码执行时最重要的角色。</li>
<li>Python IDLE：<strong>IDLE</strong>是<strong>Integrated DeveLopment Environment</strong>的缩写，即一个集成开发环境。利用 IDLE，我们可以对程序进行编写、运行和排查错误。</li>
<li>模块文档：“文档”在编程方面常常指的是对于某种程序或编程语言详细的参考。以后会在这方面更多介绍。</li>
</ul>
<h3 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h3><ol>
<li>访问<a href="https://www.python.org/downloads/" target="_blank" rel="noopener">Python官网</a>点击<code>Download Python 3.8.0</code>下载安装程序；<strong>或</strong>直接点击<a href="https://www.python.org/ftp/python/3.8.0/python-3.8.0.exe" target="_blank" rel="noopener">这个链接</a>下载安装程序。因为这个 FTP 服务器不在中国大陆，下载速度较慢是正常现象。</li>
<li>下载成功后运行程序。</li>
<li>勾选<code>Add Python 3.8 to PATH</code>。</li>
<li>点击<code>Install Now</code>。然后泡杯茶喝。</li>
<li>在开始菜单中，新添加了以下入口便安装完毕了。（图中显示3.7.2之处在你的电脑上应该是3.8.0）。<br><img src="https://cdn.jsdelivr.net/gh/bedrockdigger/lumix-ia@master/assets/python-installation/star-menu-screenshot.png" alt="start-menu-screenshot"></li>
</ol>
<h3 id="…and"><a href="#…and" class="headerlink" title="…and?"></a>…and?</h3><p>周末的任务就这么多。感兴趣的话可以把<code>IDLE</code>戳开看看；上B站一类的地方预习下 Python 语言基础。<br>另外，你可能已经注意到了这个页面底部有个评论模块。如果你想说什么或者有一些问题，都可以在相应文章的评论栏填写<code>昵称</code>和<code>邮箱</code>（不用管那个<code>网址</code>）之后畅所欲言。</p>
<h3 id="p-s-大佬，你们没被忘记"><a href="#p-s-大佬，你们没被忘记" class="headerlink" title="p.s. 大佬，你们没被忘记"></a>p.s. 大佬，你们没被忘记</h3><ul>
<li>有其他编程语言基础的，尽量看看 Python <a href="https://docs.python.org/zh-cn/3/reference/index.html" target="_blank" rel="noopener">语法参考</a>和<a href="https://docs.python.org/zh-cn/3/library/index.html" target="_blank" rel="noopener">标准库参考</a>中你认为重要的部分。</li>
<li>此外也可先预习下<a href="https://www.arduino.cc/reference/en/" target="_blank" rel="noopener">Arduino的语法</a>。<br>周一老时间见 :)</li>
</ul>
]]></content>
      <categories>
        <category>指南</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World!</title>
    <url>/lumix-ia/2019/10/18/hello-world/</url>
    <content><![CDATA[<p>衷心欢迎各位加入 Lumix 大家庭！<br>此网站算是我们社团以后的“官网”，收藏下嘛？</p>]]></content>
      <categories>
        <category>里程碑</category>
      </categories>
      <tags>
        <tag>Hello World!</tag>
      </tags>
  </entry>
</search>
